version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    environment:
      POSTGRES_DB: tinder_bot
      POSTGRES_USER: tinder_user
      POSTGRES_PASSWORD: tinder_password
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "5432:5432"
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U tinder_user -d tinder_bot"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Redis Cache
  redis:
    image: redis:7-alpine
    command: redis-server --appendonly yes
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Telegram Bot (Polling Mode)
  bot_polling:
    build: .
    environment:
      - DATABASE_URL=postgresql://tinder_user:tinder_password@postgres:5432/tinder_bot
      - REDIS_URL=redis://redis:6379/0
    env_file:
      - .env
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    command: python run_bot.py polling
    restart: unless-stopped
    profiles:
      - polling

  # Webhook Server (Production Mode)
  bot_webhook:
    build: .
    environment:
      - DATABASE_URL=postgresql://tinder_user:tinder_password@postgres:5432/tinder_bot
      - REDIS_URL=redis://redis:6379/0
    env_file:
      - .env
    ports:
      - "8000:8000"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    command: python run_bot.py webhook --host 0.0.0.0 --port 8000
    restart: unless-stopped
    profiles:
      - webhook

  # Nginx Reverse Proxy (for HTTPS)
  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf
      - ./ssl:/etc/nginx/ssl
    depends_on:
      - bot_webhook
    restart: unless-stopped
    profiles:
      - webhook

volumes:
  postgres_data:
  redis_data: