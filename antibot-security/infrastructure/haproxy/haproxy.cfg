global
    daemon
    log 127.0.0.1:514 local0
    chroot /var/lib/haproxy
    stats socket /run/haproxy/admin.sock mode 660 level admin
    stats timeout 30s
    user haproxy
    group haproxy
    
    # Security
    ssl-default-bind-ciphers ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384
    ssl-default-bind-options ssl-min-ver TLSv1.2 no-tls-tickets

defaults
    mode http
    log global
    option httplog
    option dontlognull
    option log-health-checks
    option forwardfor
    option httpclose
    timeout connect 5000ms
    timeout client 50000ms
    timeout server 50000ms
    timeout check 3000ms
    errorfile 400 /etc/haproxy/errors/400.http
    errorfile 403 /etc/haproxy/errors/403.http
    errorfile 408 /etc/haproxy/errors/408.http
    errorfile 500 /etc/haproxy/errors/500.http
    errorfile 502 /etc/haproxy/errors/502.http
    errorfile 503 /etc/haproxy/errors/503.http
    errorfile 504 /etc/haproxy/errors/504.http

# Statistics interface
listen stats
    bind *:8999
    stats enable
    stats hide-version
    stats refresh 30s
    stats show-node
    stats show-legends
    stats uri /stats
    stats realm HAProxy\ Statistics
    stats auth admin:haproxy123
    stats admin if TRUE

# Frontend for SMS services
frontend sms_frontend
    bind *:8100
    mode http
    
    # Request rate limiting
    stick-table type ip size 100k expire 30s store http_req_rate(10s)
    http-request track-sc0 src
    http-request deny if { sc_http_req_rate(0) gt 50 }
    
    # Health check bypass
    acl health_check path_beg /health
    use_backend sms_health if health_check
    
    # Route to SMS service backend
    default_backend sms_services
    
    # Logging and monitoring
    capture request header Host len 32
    capture request header User-Agent len 64
    capture response header Content-Type len 32

# Backend for SMS services
backend sms_services
    mode http
    balance roundrobin
    
    # Health check configuration
    option httpchk GET /health
    http-check expect status 200
    
    # Advanced health check
    option log-health-checks
    option allbackups
    
    # Connection settings
    timeout server 30s
    timeout connect 3s
    
    # Retry configuration
    retries 3
    option redispatch
    
    # Servers with health checks and failover
    server sms1 sms-service-1:8002 check inter 10s fastinter 2s downinter 5s rise 2 fall 3 weight 100
    server sms2 sms-service-2:8002 check inter 10s fastinter 2s downinter 5s rise 2 fall 3 weight 100 backup
    
    # Connection limiting
    fullconn 1000

# Health check backend
backend sms_health
    mode http
    balance roundrobin
    
    # Quick health check response
    timeout server 5s
    
    server sms1 sms-service-1:8002 check inter 5s
    server sms2 sms-service-2:8002 check inter 5s

# Frontend for Risk Engine services
frontend risk_engine_frontend
    bind *:8101
    mode http
    
    # Rate limiting for risk assessments
    stick-table type ip size 100k expire 30s store http_req_rate(10s)
    http-request track-sc0 src
    http-request deny if { sc_http_req_rate(0) gt 100 }
    
    # Health check bypass
    acl health_check path_beg /health
    use_backend risk_health if health_check
    
    # Route to risk engine backend
    default_backend risk_engines
    
    # Performance monitoring
    capture request header Host len 32
    capture response header X-Processing-Time len 16

# Backend for Risk Engine services
backend risk_engines
    mode http
    balance leastconn  # Use least connections for CPU-intensive ML workloads
    
    # Health check for ML services
    option httpchk GET /api/v1/health
    http-check expect status 200
    
    # ML service specific timeouts
    timeout server 10s  # Fast timeout for ML inference
    timeout connect 2s
    
    # Connection settings
    retries 2
    option redispatch
    
    # Servers - prioritize by performance
    server risk1 risk-engine-1:8001 check inter 15s fastinter 3s rise 2 fall 2 weight 100 maxconn 50
    server risk2 risk-engine-2:8001 check inter 15s fastinter 3s rise 2 fall 2 weight 100 maxconn 50
    
    # Circuit breaker simulation - disable server if response time > 5s
    timeout check 5s

# Health check backend for risk engines
backend risk_health
    mode http
    balance roundrobin
    
    timeout server 3s
    
    server risk1 risk-engine-1:8001 check inter 5s
    server risk2 risk-engine-2:8001 check inter 5s

# Frontend for Data Processing services
frontend data_processor_frontend
    bind *:8102
    mode http
    
    # Higher rate limits for data ingestion
    stick-table type ip size 100k expire 30s store http_req_rate(10s)
    http-request track-sc0 src
    http-request deny if { sc_http_req_rate(0) gt 1000 }
    
    # Route to data processor
    default_backend data_processors

# Backend for Data Processing services  
backend data_processors
    mode http
    balance source  # Sticky sessions for batch processing
    
    # Health check
    option httpchk GET /health
    http-check expect status 200
    
    # Data processing specific timeouts
    timeout server 60s  # Longer timeout for batch operations
    timeout connect 5s
    
    # High capacity server
    server data1 data-processor:8004 check inter 30s rise 2 fall 3 weight 100 maxconn 200
    
# SSL Termination Frontend (for production)
frontend ssl_frontend
    bind *:8443 ssl crt /etc/ssl/certs/antibot.pem
    mode http
    
    # Security headers
    http-response set-header Strict-Transport-Security "max-age=31536000; includeSubDomains"
    http-response set-header X-Frame-Options "DENY"
    http-response set-header X-Content-Type-Options "nosniff"
    http-response set-header X-XSS-Protection "1; mode=block"
    
    # Route based on path
    acl is_sms path_beg /api/v1/sms
    acl is_risk path_beg /api/v1/risk
    acl is_data path_beg /api/v1/events
    
    use_backend sms_services if is_sms
    use_backend risk_engines if is_risk
    use_backend data_processors if is_data
    
    # Default to risk engine
    default_backend risk_engines

# WebSocket support for real-time updates
frontend websocket_frontend
    bind *:8103
    mode http
    
    # WebSocket upgrade handling
    acl is_websocket hdr(upgrade) -i websocket
    acl is_websocket hdr_beg(host) -i ws
    
    # Route WebSocket connections
    use_backend websocket_backend if is_websocket
    
    # Default HTTP handling
    default_backend risk_engines

backend websocket_backend
    mode http
    balance source  # Sticky sessions for WebSocket
    
    # WebSocket specific settings
    timeout tunnel 1h
    timeout server 1h
    
    # Servers supporting WebSocket
    server ws1 risk-engine-1:8001 check inter 30s
    server ws2 risk-engine-2:8001 check inter 30s

# Error pages and maintenance
backend maintenance
    mode http
    errorfile 503 /etc/haproxy/errors/503-maintenance.http

# Global configuration for monitoring
listen prometheus_exporter
    bind *:8404
    mode http
    
    # Prometheus metrics endpoint
    http-request use-service prometheus-exporter
    no log