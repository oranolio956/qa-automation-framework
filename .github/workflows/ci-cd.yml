name: CI/CD Pipeline - Snapchat Automation Platform

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Target environment'
        required: true
        default: 'staging'
        type: choice
        options:
        - staging
        - production

env:
  REGISTRY: ghcr.io
  IMAGE_NAME_MAIN: ${{ github.repository }}/snapchat-automation
  IMAGE_NAME_ANDROID: ${{ github.repository }}/android-automation

jobs:
  # Preliminary checks and setup
  setup:
    runs-on: ubuntu-latest
    outputs:
      should_deploy: ${{ steps.changes.outputs.should_deploy }}
      environment: ${{ steps.env.outputs.environment }}
      version: ${{ steps.version.outputs.version }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Determine environment
        id: env
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            echo "environment=${{ github.event.inputs.environment }}" >> $GITHUB_OUTPUT
          elif [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
            echo "environment=production" >> $GITHUB_OUTPUT
          else
            echo "environment=staging" >> $GITHUB_OUTPUT
          fi

      - name: Generate version
        id: version
        run: |
          VERSION=$(date +%Y%m%d%H%M%S)-${GITHUB_SHA::8}
          echo "version=$VERSION" >> $GITHUB_OUTPUT

      - name: Check for changes
        id: changes
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]] || [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
            echo "should_deploy=true" >> $GITHUB_OUTPUT
          else
            echo "should_deploy=false" >> $GITHUB_OUTPUT
          fi

  # Security and dependency scanning
  security:
    runs-on: ubuntu-latest
    needs: setup
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: 'trivy-results.sarif'

      - name: Scan for secrets
        uses: trufflesecurity/trufflehog@main
        with:
          path: ./
          base: main
          head: HEAD

  # Backend testing and quality checks
  backend-test:
    runs-on: ubuntu-latest
    needs: setup
    services:
      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
      
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: test_password
          POSTGRES_DB: test_db
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          cache: 'pip'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest pytest-cov pytest-asyncio

      - name: Run linting
        run: |
          pip install flake8 black isort
          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
          black --check .
          isort --check-only .

      - name: Run backend tests
        env:
          DATABASE_URL: postgresql://postgres:test_password@localhost:5432/test_db
          REDIS_URL: redis://localhost:6379/0
          JWT_SECRET: test_secret_key_for_testing_only
          ENVIRONMENT: testing
        run: |
          cd backend
          python -m pytest tests/ -v --cov=app --cov-report=xml --cov-report=html

      - name: Upload coverage reports
        uses: codecov/codecov-action@v3
        with:
          file: ./backend/coverage.xml
          flags: backend
          name: backend-coverage

  # Android automation testing
  android-test:
    runs-on: ubuntu-latest
    needs: setup
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install Android automation dependencies
        run: |
          pip install -r automation/android/requirements.txt
          pip install pytest pytest-mock

      - name: Run Android automation tests
        run: |
          cd automation/android
          python -m pytest tests/ -v --tb=short

      - name: Validate Android Docker configuration
        run: |
          docker build -f Dockerfile.android -t android-test .
          docker run --rm android-test /opt/scripts/validate_setup.sh

  # Build Docker images
  build:
    runs-on: ubuntu-latest
    needs: [setup, security, backend-test, android-test]
    if: needs.setup.outputs.should_deploy == 'true'
    outputs:
      main_image: ${{ steps.meta-main.outputs.tags }}
      android_image: ${{ steps.meta-android.outputs.tags }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata for main app
        id: meta-main
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_MAIN }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=raw,value=${{ needs.setup.outputs.version }}
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Extract metadata for Android farm
        id: meta-android
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_ANDROID }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=raw,value=${{ needs.setup.outputs.version }}
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push main application image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: ${{ steps.meta-main.outputs.tags }}
          labels: ${{ steps.meta-main.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64

      - name: Build and push Android farm image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile.android
          push: true
          tags: ${{ steps.meta-android.outputs.tags }}
          labels: ${{ steps.meta-android.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64

  # Infrastructure deployment with Terraform
  terraform:
    runs-on: ubuntu-latest
    needs: [setup, build]
    if: needs.setup.outputs.should_deploy == 'true'
    environment: ${{ needs.setup.outputs.environment }}
    defaults:
      run:
        working-directory: terraform
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ~1.5.0

      - name: Configure AWS credentials for state backend
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Terraform init
        run: terraform init
        env:
          TF_WORKSPACE: ${{ needs.setup.outputs.environment }}

      - name: Terraform plan
        run: terraform plan -var-file="${{ needs.setup.outputs.environment }}.tfvars" -out=tfplan
        env:
          FLY_API_TOKEN: ${{ secrets.FLY_API_TOKEN }}
          TF_VAR_database_url: ${{ secrets.DATABASE_URL }}
          TF_VAR_redis_url: ${{ secrets.REDIS_URL }}
          TF_VAR_telegram_bot_token: ${{ secrets.TELEGRAM_BOT_TOKEN }}
          TF_VAR_jwt_secret: ${{ secrets.JWT_SECRET }}
          TF_VAR_encryption_key: ${{ secrets.ENCRYPTION_KEY }}
          TF_VAR_main_app_image: ${{ needs.build.outputs.main_image }}
          TF_VAR_android_farm_image: ${{ needs.build.outputs.android_image }}

      - name: Terraform apply
        if: needs.setup.outputs.environment == 'production' && github.ref == 'refs/heads/main'
        run: terraform apply -auto-approve tfplan
        env:
          FLY_API_TOKEN: ${{ secrets.FLY_API_TOKEN }}

  # Deploy to Fly.io
  deploy:
    runs-on: ubuntu-latest
    needs: [setup, build, terraform]
    if: needs.setup.outputs.should_deploy == 'true'
    environment: ${{ needs.setup.outputs.environment }}
    strategy:
      matrix:
        app: [main-app, android-farm]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Fly CLI
        uses: superfly/flyctl-actions/setup-flyctl@master

      - name: Deploy main application
        if: matrix.app == 'main-app'
        run: |
          flyctl deploy \
            --config fly.toml \
            --app snapchat-automation-${{ needs.setup.outputs.environment }} \
            --image ${{ needs.build.outputs.main_image }}
        env:
          FLY_API_TOKEN: ${{ secrets.FLY_API_TOKEN }}

      - name: Deploy Android farm
        if: matrix.app == 'android-farm'
        run: |
          flyctl deploy \
            --config fly-android.toml \
            --app android-device-farm-${{ needs.setup.outputs.environment }} \
            --image ${{ needs.build.outputs.android_image }}
        env:
          FLY_API_TOKEN: ${{ secrets.FLY_API_TOKEN }}

  # Post-deployment testing and validation
  integration-tests:
    runs-on: ubuntu-latest
    needs: [setup, deploy]
    if: needs.setup.outputs.should_deploy == 'true'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install test dependencies
        run: |
          pip install requests pytest

      - name: Wait for deployment
        run: sleep 60

      - name: Health check - Main app
        run: |
          curl -f https://snapchat-automation-${{ needs.setup.outputs.environment }}.fly.dev/health

      - name: Health check - Android farm
        run: |
          curl -f https://android-device-farm-${{ needs.setup.outputs.environment }}.fly.dev/health

      - name: Run integration tests
        run: |
          cd tests/integration
          python -m pytest test_deployment.py -v
        env:
          BASE_URL: https://snapchat-automation-${{ needs.setup.outputs.environment }}.fly.dev
          ANDROID_FARM_URL: https://android-device-farm-${{ needs.setup.outputs.environment }}.fly.dev

  # Performance benchmarking
  performance-test:
    runs-on: ubuntu-latest
    needs: [setup, deploy]
    if: needs.setup.outputs.should_deploy == 'true' && needs.setup.outputs.environment == 'production'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install k6
        run: |
          sudo apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys C5AD17C747E3415A3642D57D77C6C491D6AC1D69
          echo "deb https://dl.k6.io/deb stable main" | sudo tee /etc/apt/sources.list.d/k6.list
          sudo apt-get update
          sudo apt-get install k6

      - name: Run performance tests
        run: |
          cd tests/performance
          k6 run --env BASE_URL=https://snapchat-automation-${{ needs.setup.outputs.environment }}.fly.dev load_test.js

      - name: Upload performance results
        uses: actions/upload-artifact@v3
        with:
          name: performance-results
          path: tests/performance/results/

  # Monitoring and alerting setup
  monitoring-setup:
    runs-on: ubuntu-latest
    needs: [setup, deploy]
    if: needs.setup.outputs.should_deploy == 'true'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure monitoring alerts
        run: |
          # Configure Prometheus alerts
          curl -X POST \
            -H "Content-Type: application/json" \
            -d @monitoring/alerts/deployment.json \
            https://alertmanager-${{ needs.setup.outputs.environment }}.fly.dev/api/v1/alerts

      - name: Update Grafana dashboards
        run: |
          # Update deployment dashboards
          cd monitoring/grafana
          for dashboard in *.json; do
            curl -X POST \
              -H "Content-Type: application/json" \
              -d @$dashboard \
              https://grafana-${{ needs.setup.outputs.environment }}.fly.dev/api/dashboards/db
          done

  # Rollback on failure
  rollback:
    runs-on: ubuntu-latest
    needs: [setup, deploy, integration-tests]
    if: failure() && needs.setup.outputs.should_deploy == 'true'
    environment: ${{ needs.setup.outputs.environment }}
    steps:
      - name: Setup Fly CLI
        uses: superfly/flyctl-actions/setup-flyctl@master

      - name: Rollback deployment
        run: |
          flyctl releases rollback \
            --app snapchat-automation-${{ needs.setup.outputs.environment }} \
            --yes
          flyctl releases rollback \
            --app android-device-farm-${{ needs.setup.outputs.environment }} \
            --yes
        env:
          FLY_API_TOKEN: ${{ secrets.FLY_API_TOKEN }}

      - name: Notify failure
        uses: 8398a7/action-slack@v3
        with:
          status: failure
          channel: '#deployments'
          message: |
            🚨 Deployment failed and rolled back
            Environment: ${{ needs.setup.outputs.environment }}
            Version: ${{ needs.setup.outputs.version }}
            Commit: ${{ github.sha }}
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

  # Success notification
  notify-success:
    runs-on: ubuntu-latest
    needs: [setup, deploy, integration-tests, performance-test]
    if: success() && needs.setup.outputs.should_deploy == 'true'
    steps:
      - name: Notify success
        uses: 8398a7/action-slack@v3
        with:
          status: success
          channel: '#deployments'
          message: |
            ✅ Deployment successful!
            Environment: ${{ needs.setup.outputs.environment }}
            Version: ${{ needs.setup.outputs.version }}
            Main App: https://snapchat-automation-${{ needs.setup.outputs.environment }}.fly.dev
            Android Farm: https://android-device-farm-${{ needs.setup.outputs.environment }}.fly.dev
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}