version: '3.8'

services:
  vault:
    image: vault:1.14
    cap_add:
      - IPC_LOCK
    environment:
      - VAULT_DEV_ROOT_TOKEN_ID=dev-token
      - VAULT_DEV_LISTEN_ADDRESS=0.0.0.0:8200
    ports:
      - "8200:8200"
    volumes:
      - vault_data:/vault/data
    command: vault server -dev
    networks:
      - infra_network
    restart: unless-stopped

  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    command: redis-server --appendonly yes
    volumes:
      - redis_data:/data
    networks:
      - infra_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  worker-provisioner:
    build:
      context: .
      dockerfile: Dockerfile.provisioner
    environment:
      - VAULT_ADDRESS=http://vault:8200
      - VAULT_TOKEN=dev-token
      - REDIS_URL=redis://redis:6379
      - WORKER_COUNT=${WORKER_COUNT:-3}
      - CLOUD_API_TOKEN=${CLOUD_API_TOKEN}
      - GCP_PROJECT=${GCP_PROJECT}
      - HETZNER_API_TOKEN=${HETZNER_API_TOKEN}
      # Smartproxy configuration
      - SMARTPROXY_USER=${SMARTPROXY_USER}
      - SMARTPROXY_PASS=${SMARTPROXY_PASS}
      - SMARTPROXY_HOST=${SMARTPROXY_HOST}
      - SMARTPROXY_PORT=${SMARTPROXY_PORT}
    volumes:
      - ./scripts:/app/scripts:ro
      - ./config:/app/config:ro
    depends_on:
      - vault
      - redis
    networks:
      - infra_network
    restart: unless-stopped
    security_opt:
      - no-new-privileges:true

  worker-manager:
    build:
      context: .
      dockerfile: Dockerfile.manager
    environment:
      - VAULT_ADDRESS=http://vault:8200
      - VAULT_TOKEN=dev-token
      - REDIS_URL=redis://redis:6379
      - ORCHESTRATOR_URL=http://orchestrator:5000
      # Smartproxy configuration
      - SMARTPROXY_USER=${SMARTPROXY_USER}
      - SMARTPROXY_PASS=${SMARTPROXY_PASS}
      - SMARTPROXY_HOST=${SMARTPROXY_HOST}
      - SMARTPROXY_PORT=${SMARTPROXY_PORT}
    volumes:
      - worker_logs:/var/log/workers
    depends_on:
      - vault
      - redis
    networks:
      - infra_network
      - default
    restart: unless-stopped
    security_opt:
      - no-new-privileges:true

  orchestrator:
    image: orchestrator-bot:latest
    environment:
      - REDIS_URL=redis://redis:6379
      - CHAT_API_TOKEN=${CHAT_API_TOKEN}
      - RATE_LIMIT_PER_MIN=100
      # Smartproxy configuration
      - SMARTPROXY_USER=${SMARTPROXY_USER}
      - SMARTPROXY_PASS=${SMARTPROXY_PASS}
      - SMARTPROXY_HOST=${SMARTPROXY_HOST}
      - SMARTPROXY_PORT=${SMARTPROXY_PORT}
    ports:
      - "5000:5000"
    depends_on:
      - redis
    networks:
      - infra_network
      - default
    restart: unless-stopped
    security_opt:
      - no-new-privileges:true
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

volumes:
  vault_data:
  redis_data:
  worker_logs:

networks:
  infra_network:
    driver: bridge
  default:
    external: true