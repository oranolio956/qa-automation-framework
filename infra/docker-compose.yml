version: '3.8'

services:
  vault:
    image: vault:1.14
    cap_add:
      - IPC_LOCK
    cap_drop:
      - ALL
    environment:
      # SECURE: Root token from external secrets manager only
      - VAULT_ROOT_TOKEN_FILE=/vault/secrets/root-token
      - VAULT_LISTEN_ADDRESS=0.0.0.0:8200
      - VAULT_LOG_LEVEL=INFO
      - VAULT_TLS_DISABLE=false  # Force TLS enabled for security
      - VAULT_ADDR=https://0.0.0.0:8200
      - VAULT_SEAL_TYPE=transit
      - VAULT_TRANSIT_SEAL_KEY_NAME=autounseal
    ports:
      - "8200:8200"
    volumes:
      - vault_data:/vault/data
      - ./config/vault:/vault/config:ro
      - ./config/vault/tls:/vault/tls:ro
      - ./secrets/vault:/vault/secrets:ro  # External secrets mount
    command: vault server -config=/vault/config/vault.hcl
    networks:
      - infra_network
    restart: unless-stopped
    security_opt:
      - no-new-privileges:true
    read_only: true
    tmpfs:
      - /tmp
    healthcheck:
      test: ["CMD", "vault", "status"]
      interval: 30s
      timeout: 10s
      retries: 3

  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
      - "6380:6380"  # TLS port
    environment:
      - REDIS_PASSWORD=${REDIS_PASSWORD}
    command: >
      redis-server
      --requirepass "${REDIS_PASSWORD}"
      --appendonly yes
      --maxmemory ${REDIS_MAX_MEMORY:-1gb}
      --maxmemory-policy allkeys-lru
      --save 900 1
      --save 300 10
      --save 60 10000
      --tcp-keepalive 60
      --timeout 300
      --tls-port 6380
      --tls-cert-file /tls/redis.crt
      --tls-key-file /tls/redis.key
      --tls-ca-cert-file /tls/ca.crt
    volumes:
      - redis_data:/data
      - ./config/redis.conf:/usr/local/etc/redis/redis.conf:ro
      - ./config/tls:/tls:ro
    networks:
      - infra_network
    restart: unless-stopped
    security_opt:
      - no-new-privileges:true
    read_only: true
    tmpfs:
      - /tmp
      - /var/run
    cap_drop:
      - ALL
    cap_add:
      - SETGID
      - SETUID
    healthcheck:
      test: ["CMD", "redis-cli", "-a", "${REDIS_PASSWORD}", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    ulimits:
      memlock:
        soft: -1
        hard: -1

  # RabbitMQ Message Queue
  rabbitmq:
    image: rabbitmq:3.12-management-alpine
    hostname: rabbitmq
    ports:
      - "5672:5672"    # AMQP port
      - "15672:15672"  # Management UI
    environment:
      - RABBITMQ_DEFAULT_USER=${RABBITMQ_USER}
      - RABBITMQ_DEFAULT_PASS=${RABBITMQ_PASSWORD}
      - RABBITMQ_DEFAULT_VHOST=/
      # TLS Configuration
      - RABBITMQ_SSL_CERTFILE=/etc/rabbitmq/tls/server.crt
      - RABBITMQ_SSL_KEYFILE=/etc/rabbitmq/tls/server.key
      - RABBITMQ_SSL_CACERTFILE=/etc/rabbitmq/tls/ca.crt
      - RABBITMQ_SSL_VERIFY=verify_peer
      - RABBITMQ_SSL_FAIL_IF_NO_PEER_CERT=true
      # Performance optimization
      - RABBITMQ_VM_MEMORY_HIGH_WATERMARK=0.8
      - RABBITMQ_DISK_FREE_LIMIT=2GB
      - RABBITMQ_MAX_CONNECTIONS=1000
      - RABBITMQ_MAX_CHANNELS_PER_CONNECTION=100
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
      - ./config/rabbitmq/rabbitmq.conf:/etc/rabbitmq/rabbitmq.conf:ro
      - ./config/rabbitmq/definitions.json:/etc/rabbitmq/definitions.json:ro
      - ./config/rabbitmq/enabled_plugins:/etc/rabbitmq/enabled_plugins:ro
      - ./config/tls:/etc/rabbitmq/tls:ro
    networks:
      - infra_network
    restart: unless-stopped
    security_opt:
      - no-new-privileges:true
    read_only: true
    tmpfs:
      - /tmp
      - /var/lib/rabbitmq/mnesia
    cap_drop:
      - ALL
    cap_add:
      - CHOWN
      - DAC_OVERRIDE
      - SETGID
      - SETUID
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    logging:
      options:
        max-size: "10m"
        max-file: "3"

  # SMS Service with Redis/RabbitMQ Integration
  sms-service:
    build:
      context: ./antibot-security/backend/sms-service
      dockerfile: Dockerfile
    ports:
      - "8002:8002"
    environment:
      # Service configuration
      - SERVICE_NAME=sms-service
      - LOG_LEVEL=INFO
      - PYTHONPATH=/app
      
      # Redis configuration
      - REDIS_URL=redis://:${REDIS_PASSWORD}@redis:6379/0
      - REDIS_TLS_URL=rediss://:${REDIS_PASSWORD}@redis:6380/0
      - REDIS_MAX_CONNECTIONS=100
      - REDIS_SOCKET_KEEPALIVE=True
      - REDIS_SOCKET_KEEPALIVE_OPTIONS=1,3,5
      
      # RabbitMQ configuration
      - RABBITMQ_URL=amqps://${RABBITMQ_USER}:${RABBITMQ_PASSWORD}@rabbitmq:5671/
      - RABBITMQ_EXCHANGE=sms_exchange
      - RABBITMQ_QUEUE_PREFIX=sms
      - RABBITMQ_MAX_PRIORITY=10
      
      # Rate limiting
      - RATE_LIMIT_PER_PHONE=5
      - RATE_LIMIT_WINDOW=300
      - CIRCUIT_BREAKER_THRESHOLD=10
      - CIRCUIT_BREAKER_TIMEOUT=30
      
      # SECURE: Service uses integrated Vault client for all credentials
      - VAULT_ADDR=https://vault:8200
      - VAULT_TOKEN_FILE=/vault/secrets/sms-service-token
      - TWILIO_AREA_CODE=${TWILIO_AREA_CODE:-720}
      - AWS_SNS_REGION=${AWS_SNS_REGION:-us-east-1}
      
      # Monitoring
      - PROMETHEUS_PUSHGATEWAY_URL=http://prometheus:9090
      - METRICS_ENABLED=true
    volumes:
      - ./config/sms-service:/app/config:ro
      - sms_logs:/var/log/sms
    depends_on:
      - redis
      - rabbitmq
      - prometheus
    networks:
      - infra_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8002/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    security_opt:
      - no-new-privileges:true
    read_only: true
    tmpfs:
      - /tmp
      - /var/log/sms
    cap_drop:
      - ALL
    cap_add:
      - NET_BIND_SERVICE
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
        reservations:
          memory: 256M
          cpus: '0.25'
    logging:
      options:
        max-size: "10m"
        max-file: "3"

  # SMS Worker for Queue Processing
  sms-worker:
    build:
      context: ./antibot-security/backend/sms-service
      dockerfile: Dockerfile.worker
    environment:
      - SERVICE_NAME=sms-worker
      - LOG_LEVEL=INFO
      - PYTHONPATH=/app
      - REDIS_URL=redis://:${REDIS_PASSWORD}@redis:6379/0
      - REDIS_TLS_URL=rediss://:${REDIS_PASSWORD}@redis:6380/0
      - RABBITMQ_URL=amqps://${RABBITMQ_USER}:${RABBITMQ_PASSWORD}@rabbitmq:5671/
      - WORKER_CONCURRENCY=${SMS_WORKER_CONCURRENCY:-4}
      - WORKER_PREFETCH=${SMS_WORKER_PREFETCH:-10}
      # SECURE: All credentials retrieved from Vault at runtime
      - VAULT_ADDR=https://vault:8200
      - VAULT_TOKEN_FILE=/vault/secrets/service-token
      - TWILIO_AREA_CODE=${TWILIO_AREA_CODE:-720}
      - AWS_SNS_REGION=${AWS_SNS_REGION:-us-east-1}
    volumes:
      - sms_logs:/var/log/sms
    depends_on:
      - redis
      - rabbitmq
    networks:
      - infra_network
    restart: unless-stopped
    security_opt:
      - no-new-privileges:true
    read_only: true
    tmpfs:
      - /tmp
      - /var/log/sms
    cap_drop:
      - ALL
    deploy:
      replicas: 2
      resources:
        limits:
          memory: 256M
          cpus: '0.25'
        reservations:
          memory: 128M
          cpus: '0.1'
    logging:
      options:
        max-size: "10m"
        max-file: "3"

  # Email Creation Service
  email-service:
    build:
      context: ..
      dockerfile: automation/email/Dockerfile.email-service
    ports:
      - "8003:8003"
    environment:
      - SERVICE_NAME=email-service
      - LOG_LEVEL=INFO
      - PYTHONPATH=/app
      - PORT=8003
      
      # Redis configuration
      - REDIS_URL=redis://:${REDIS_PASSWORD}@redis:6379/2
      - REDIS_TLS_URL=rediss://:${REDIS_PASSWORD}@redis:6380/2
      - REDIS_MAX_CONNECTIONS=50
      
      # RabbitMQ configuration
      - RABBITMQ_URL=amqps://${RABBITMQ_USER}:${RABBITMQ_PASSWORD}@rabbitmq:5671/
      
      # SECURE: Email provider API keys from Vault
      - VAULT_ADDR=https://vault:8200
      - RAPIDAPI_VAULT_PATH=secret/apis/rapidapi
      - CAPTCHA_VAULT_PATH=secret/apis/captcha
      
      # Pool configuration
      - EMAIL_POOL_MIN_SIZE=20
      - EMAIL_POOL_MAX_SIZE=100
      - EMAIL_POOL_REFILL_THRESHOLD=5
      
      # Monitoring
      - PROMETHEUS_PUSHGATEWAY_URL=http://prometheus:9090
      - METRICS_ENABLED=true
    volumes:
      - email_logs:/var/log/email
    depends_on:
      - redis
      - rabbitmq
      - prometheus
    networks:
      - infra_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8003/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    security_opt:
      - no-new-privileges:true
    read_only: true
    tmpfs:
      - /tmp
      - /var/log/email
    cap_drop:
      - ALL
    cap_add:
      - NET_BIND_SERVICE
    deploy:
      resources:
        limits:
          memory: 768M
          cpus: '0.75'
        reservations:
          memory: 384M
          cpus: '0.25'
    logging:
      options:
        max-size: "10m"
        max-file: "3"

  # Inbox Monitoring Service
  inbox-monitor:
    build:
      context: ..
      dockerfile: automation/email/Dockerfile.email-service
    command: ["python", "-m", "automation.email.inbox_monitor_service"]
    ports:
      - "8004:8004"
    environment:
      - SERVICE_NAME=inbox-monitor
      - LOG_LEVEL=INFO
      - PYTHONPATH=/app
      - PORT=8004
      
      # Redis configuration
      - REDIS_URL=redis://:${REDIS_PASSWORD}@redis:6379/3
      - REDIS_TLS_URL=rediss://:${REDIS_PASSWORD}@redis:6380/3
      
      # Email service URL
      - EMAIL_SERVICE_URL=http://email-service:8003
      
      # Monitoring configuration
      - MAX_MONITORS=100
      - DEFAULT_POLL_INTERVAL=10
      - WEBHOOK_TIMEOUT=30
      
      # Prometheus
      - PROMETHEUS_PUSHGATEWAY_URL=http://prometheus:9090
    volumes:
      - email_logs:/var/log/email
    depends_on:
      - redis
      - email-service
      - prometheus
    networks:
      - infra_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8004/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    security_opt:
      - no-new-privileges:true
    read_only: true
    tmpfs:
      - /tmp
      - /var/log/email
    cap_drop:
      - ALL
    cap_add:
      - NET_BIND_SERVICE
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
        reservations:
          memory: 256M
          cpus: '0.25'
    logging:
      options:
        max-size: "10m"
        max-file: "3"

  worker-provisioner:
    build:
      context: .
      dockerfile: Dockerfile.provisioner
    environment:
      - VAULT_ADDRESS=https://vault:8200
      - VAULT_TOKEN=${VAULT_TOKEN}
      - REDIS_URL=redis://:${REDIS_PASSWORD}@redis:6379
      - REDIS_TLS_URL=rediss://:${REDIS_PASSWORD}@redis:6380
      - WORKER_COUNT=${WORKER_COUNT:-3}
      - CLOUD_API_TOKEN=${CLOUD_API_TOKEN}
      - GCP_PROJECT=${GCP_PROJECT}
      - HETZNER_API_TOKEN=${HETZNER_API_TOKEN}
      # Bright Data proxy configuration
      - BRIGHTDATA_PROXY_URL=${BRIGHTDATA_PROXY_URL}
      # Twilio SMS configuration
      - TWILIO_ACCOUNT_SID=${TWILIO_ACCOUNT_SID}
      - TWILIO_AUTH_TOKEN=${TWILIO_AUTH_TOKEN}
      - TWILIO_AREA_CODE=${TWILIO_AREA_CODE}
    volumes:
      - ./scripts:/app/scripts:ro
      - ./config:/app/config:ro
    depends_on:
      - vault
      - redis
    networks:
      - infra_network
    restart: unless-stopped
    security_opt:
      - no-new-privileges:true

  worker-manager:
    build:
      context: .
      dockerfile: Dockerfile.manager
    environment:
      - VAULT_ADDRESS=https://vault:8200
      - VAULT_TOKEN=${VAULT_TOKEN}
      - REDIS_URL=redis://:${REDIS_PASSWORD}@redis:6379
      - REDIS_TLS_URL=rediss://:${REDIS_PASSWORD}@redis:6380
      - ORCHESTRATOR_URL=http://orchestrator:5000
      # Bright Data proxy configuration
      - BRIGHTDATA_PROXY_URL=${BRIGHTDATA_PROXY_URL}
      # Twilio SMS configuration
      - TWILIO_ACCOUNT_SID=${TWILIO_ACCOUNT_SID}
      - TWILIO_AUTH_TOKEN=${TWILIO_AUTH_TOKEN}
      - TWILIO_AREA_CODE=${TWILIO_AREA_CODE}
    volumes:
      - worker_logs:/var/log/workers
    depends_on:
      - vault
      - redis
    networks:
      - infra_network
      - default
    restart: unless-stopped
    security_opt:
      - no-new-privileges:true

  orchestrator:
    image: orchestrator-bot:latest
    environment:
      - REDIS_URL=redis://:${REDIS_PASSWORD}@redis:6379
      - REDIS_TLS_URL=rediss://:${REDIS_PASSWORD}@redis:6380
      - CHAT_API_TOKEN=${CHAT_API_TOKEN}
      - RATE_LIMIT_PER_MIN=100
      # Bright Data proxy configuration
      - BRIGHTDATA_PROXY_URL=${BRIGHTDATA_PROXY_URL}
      # Twilio SMS configuration
      - TWILIO_ACCOUNT_SID=${TWILIO_ACCOUNT_SID}
      - TWILIO_AUTH_TOKEN=${TWILIO_AUTH_TOKEN}
      - TWILIO_AREA_CODE=${TWILIO_AREA_CODE}
    ports:
      - "5000:5000"
    depends_on:
      - redis
    networks:
      - infra_network
      - default
    restart: unless-stopped
    security_opt:
      - no-new-privileges:true
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Monitoring and Observability Stack
  prometheus:
    image: prom/prometheus:v2.47.0
    ports:
      - "9090:9090"
    volumes:
      - ./config/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - ./config/alert_rules.yml:/etc/prometheus/alert_rules.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=30d'
      - '--web.enable-lifecycle'
      - '--web.enable-admin-api'
    networks:
      - infra_network
    restart: unless-stopped
    security_opt:
      - no-new-privileges:true
    read_only: true
    tmpfs:
      - /tmp
    cap_drop:
      - ALL
    cap_add:
      - NET_BIND_SERVICE

  grafana:
    image: grafana/grafana:10.1.0
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_ADMIN_PASSWORD:-admin}
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_INSTALL_PLUGINS=grafana-piechart-panel,grafana-worldmap-panel
    volumes:
      - grafana_data:/var/lib/grafana
      - ./config/grafana/provisioning:/etc/grafana/provisioning:ro
      - ./config/grafana/dashboards:/var/lib/grafana/dashboards:ro
    depends_on:
      - prometheus
    networks:
      - infra_network
    restart: unless-stopped
    security_opt:
      - no-new-privileges:true
    read_only: true
    tmpfs:
      - /tmp
    cap_drop:
      - ALL
    cap_add:
      - NET_BIND_SERVICE
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.9.0
    environment:
      - discovery.type=single-node
      - "ES_JAVA_OPTS=-Xms2g -Xmx2g"
      - xpack.security.enabled=false
      - xpack.security.http.ssl.enabled=false
      - xpack.security.transport.ssl.enabled=false
    ports:
      - "9200:9200"
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    networks:
      - infra_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9200/_cluster/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    security_opt:
      - no-new-privileges:true
    read_only: true
    tmpfs:
      - /tmp
      - /usr/share/elasticsearch/logs
    cap_drop:
      - ALL
    cap_add:
      - NET_BIND_SERVICE
    ulimits:
      memlock:
        soft: -1
        hard: -1
      nofile:
        soft: 65536
        hard: 65536

  logstash:
    image: docker.elastic.co/logstash/logstash:8.9.0
    ports:
      - "5044:5044"
      - "5000:5000/tcp"
      - "5000:5000/udp"
      - "9600:9600"
    environment:
      - "LS_JAVA_OPTS=-Xmx1g -Xms1g"
    volumes:
      - ./config/logstash/pipeline:/usr/share/logstash/pipeline:ro
      - ./config/logstash/config/logstash.yml:/usr/share/logstash/config/logstash.yml:ro
    depends_on:
      - elasticsearch
    networks:
      - infra_network
    restart: unless-stopped
    security_opt:
      - no-new-privileges:true
    read_only: true
    tmpfs:
      - /tmp
      - /usr/share/logstash/logs
    cap_drop:
      - ALL
    cap_add:
      - NET_BIND_SERVICE
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9600"]
      interval: 30s
      timeout: 10s
      retries: 3

  kibana:
    image: docker.elastic.co/kibana/kibana:8.9.0
    ports:
      - "5601:5601"
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
      - ELASTICSEARCH_USERNAME=kibana_system
      - ELASTICSEARCH_PASSWORD=${KIBANA_PASSWORD:-kibana}
    volumes:
      - ./config/kibana/kibana.yml:/usr/share/kibana/config/kibana.yml:ro
    depends_on:
      - elasticsearch
    networks:
      - infra_network
    restart: unless-stopped
    security_opt:
      - no-new-privileges:true
    read_only: true
    tmpfs:
      - /tmp
      - /usr/share/kibana/logs
    cap_drop:
      - ALL
    cap_add:
      - NET_BIND_SERVICE
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5601/api/status"]
      interval: 30s
      timeout: 10s
      retries: 3

  alertmanager:
    image: prom/alertmanager:v0.26.0
    ports:
      - "9093:9093"
    volumes:
      - ./config/alertmanager.yml:/etc/alertmanager/alertmanager.yml:ro
      - alertmanager_data:/alertmanager
    command:
      - '--config.file=/etc/alertmanager/alertmanager.yml'
      - '--storage.path=/alertmanager'
      - '--web.external-url=http://localhost:9093'
      - '--cluster.advertise-address=0.0.0.0:9093'
    depends_on:
      - prometheus
    networks:
      - infra_network
    restart: unless-stopped
    security_opt:
      - no-new-privileges:true
    read_only: true
    tmpfs:
      - /tmp
    cap_drop:
      - ALL
    cap_add:
      - NET_BIND_SERVICE

  # Node Exporter for system metrics
  node-exporter:
    image: prom/node-exporter:v1.6.1
    ports:
      - "9100:9100"
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    command:
      - '--path.procfs=/host/proc'
      - '--path.rootfs=/rootfs'
      - '--path.sysfs=/host/sys'
      - '--collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc)($$|/)'
    networks:
      - infra_network
    restart: unless-stopped
    security_opt:
      - no-new-privileges:true
    read_only: true
    tmpfs:
      - /tmp
    cap_drop:
      - ALL
    cap_add:
      - NET_BIND_SERVICE

  # Redis Exporter for Redis metrics
  redis-exporter:
    image: oliver006/redis_exporter:v1.53.0
    ports:
      - "9121:9121"
    environment:
      - REDIS_ADDR=redis://:${REDIS_PASSWORD}@redis:6379
    depends_on:
      - redis
    networks:
      - infra_network
    restart: unless-stopped
    security_opt:
      - no-new-privileges:true
    read_only: true
    tmpfs:
      - /tmp
    cap_drop:
      - ALL
    cap_add:
      - NET_BIND_SERVICE

  # Security Event Processor
  security-monitor:
    build:
      context: .
      dockerfile: Dockerfile.security-monitor
    environment:
      - REDIS_URL=redis://:${REDIS_PASSWORD}@redis:6379
      - REDIS_TLS_URL=rediss://:${REDIS_PASSWORD}@redis:6380
      - ELASTICSEARCH_URL=http://elasticsearch:9200
      - PROMETHEUS_PUSHGATEWAY_URL=http://prometheus:9090
      - LOG_LEVEL=INFO
      - ALERT_WEBHOOK_URL=${ALERT_WEBHOOK_URL}
      - SLACK_WEBHOOK_URL=${SLACK_WEBHOOK_URL}
    volumes:
      - ./config/security-monitor:/app/config:ro
    depends_on:
      - redis
      - elasticsearch
      - prometheus
    networks:
      - infra_network
    restart: unless-stopped
    security_opt:
      - no-new-privileges:true
    read_only: true
    tmpfs:
      - /tmp
    cap_drop:
      - ALL
    cap_add:
      - NET_BIND_SERVICE

  # ML Model Monitor
  ml-monitor:
    build:
      context: .
      dockerfile: Dockerfile.ml-monitor
    environment:
      - REDIS_URL=redis://:${REDIS_PASSWORD}@redis:6379
      - REDIS_TLS_URL=rediss://:${REDIS_PASSWORD}@redis:6380
      - MODEL_STORAGE_PATH=/app/models
      - PROMETHEUS_PUSHGATEWAY_URL=http://prometheus:9090
      - MODEL_DRIFT_THRESHOLD=0.3
      - PERFORMANCE_THRESHOLD=0.95
    volumes:
      - ./models:/app/models:ro
      - ./config/ml-monitor:/app/config:ro
    networks:
      - infra_network
    restart: unless-stopped
    security_opt:
      - no-new-privileges:true
    read_only: true
    tmpfs:
      - /tmp
    cap_drop:
      - ALL
    cap_add:
      - NET_BIND_SERVICE

volumes:
  vault_data:
  redis_data:
  rabbitmq_data:
  worker_logs:
  sms_logs:
  email_logs:
  prometheus_data:
  grafana_data:
  elasticsearch_data:
  alertmanager_data:

networks:
  infra_network:
    driver: bridge
  default:
    external: true