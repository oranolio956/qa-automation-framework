input {
  # Security events from Redis stream
  redis {
    host => "redis"
    port => 6379
    key => "security_events_stream"
    data_type => "stream"
    consumer_group => "logstash_consumers"
    type => "security_event"
    tags => ["security", "antibot"]
  }
  
  # ML prediction logs
  redis {
    host => "redis"
    port => 6379
    key => "ml_predictions_stream"
    data_type => "stream"
    consumer_group => "logstash_consumers"
    type => "ml_prediction"
    tags => ["ml", "prediction"]
  }
  
  # Application logs from file
  file {
    path => "/var/log/antibot/*.log"
    start_position => "beginning"
    type => "application_log"
    tags => ["application"]
    codec => multiline {
      pattern => "^%{TIMESTAMP_ISO8601}"
      negate => true
      what => "previous"
    }
  }
  
  # System logs
  beats {
    port => 5044
    type => "system_log"
    tags => ["system", "beats"]
  }
  
  # HTTP access logs
  http {
    port => 5000
    type => "http_access"
    tags => ["http", "access"]
  }
}

filter {
  # Parse timestamp if exists
  if [@timestamp] {
    date {
      match => [ "@timestamp", "ISO8601" ]
    }
  }
  
  # Security event processing
  if [type] == "security_event" {
    # Parse JSON data
    json {
      source => "message"
    }
    
    # Add GeoIP information for source IP
    if [source_ip] {
      geoip {
        source => "source_ip"
        target => "geoip"
        add_field => {
          "coordinates" => "%{[geoip][longitude]},%{[geoip][latitude]}"
        }
      }
    }
    
    # Classify threat level
    if [threat_level] == "critical" {
      mutate {
        add_field => { "alert_priority" => "1" }
        add_tag => ["critical_threat"]
      }
    } else if [threat_level] == "high" {
      mutate {
        add_field => { "alert_priority" => "2" }
        add_tag => ["high_threat"]
      }
    } else if [threat_level] == "medium" {
      mutate {
        add_field => { "alert_priority" => "3" }
        add_tag => ["medium_threat"]
      }
    } else {
      mutate {
        add_field => { "alert_priority" => "4" }
        add_tag => ["low_threat"]
      }
    }
    
    # Extract user agent information
    if [user_agent] {
      useragent {
        source => "user_agent"
        target => "ua"
      }
    }
    
    # Add risk categorization
    if [risk_score] {
      if [risk_score] >= 0.8 {
        mutate {
          add_field => { "risk_category" => "very_high" }
          add_tag => ["very_high_risk"]
        }
      } else if [risk_score] >= 0.6 {
        mutate {
          add_field => { "risk_category" => "high" }
          add_tag => ["high_risk"]
        }
      } else if [risk_score] >= 0.4 {
        mutate {
          add_field => { "risk_category" => "medium" }
          add_tag => ["medium_risk"]
        }
      } else {
        mutate {
          add_field => { "risk_category" => "low" }
          add_tag => ["low_risk"]
        }
      }
    }
  }
  
  # ML prediction processing
  if [type] == "ml_prediction" {
    json {
      source => "message"
    }
    
    # Add model performance categories
    if [accuracy] {
      if [accuracy] < 0.8 {
        mutate {
          add_tag => ["poor_performance"]
          add_field => { "performance_category" => "poor" }
        }
      } else if [accuracy] < 0.9 {
        mutate {
          add_tag => ["moderate_performance"]
          add_field => { "performance_category" => "moderate" }
        }
      } else {
        mutate {
          add_tag => ["good_performance"]
          add_field => { "performance_category" => "good" }
        }
      }
    }
    
    # Categorize latency
    if [latency_ms] {
      if [latency_ms] > 100 {
        mutate {
          add_tag => ["high_latency"]
          add_field => { "latency_category" => "high" }
        }
      } else if [latency_ms] > 50 {
        mutate {
          add_tag => ["medium_latency"]
          add_field => { "latency_category" => "medium" }
        }
      } else {
        mutate {
          add_tag => ["low_latency"]
          add_field => { "latency_category" => "low" }
        }
      }
    }
  }
  
  # Application log processing
  if [type] == "application_log" {
    # Parse common log formats
    grok {
      match => { 
        "message" => [
          "%{TIMESTAMP_ISO8601:timestamp} - %{WORD:logger} - %{WORD:level} - %{GREEDYDATA:log_message}",
          "%{COMBINEDAPACHELOG}"
        ]
      }
    }
    
    # Parse log level
    if [level] {
      translate {
        field => "level"
        destination => "log_severity"
        dictionary => {
          "ERROR" => "4"
          "WARN" => "3"
          "WARNING" => "3"
          "INFO" => "2"
          "DEBUG" => "1"
        }
        fallback => "2"
      }
    }
  }
  
  # HTTP access log processing
  if [type] == "http_access" {
    # Parse common fields
    json {
      source => "message"
    }
    
    # Add response time categories
    if [response_time_ms] {
      if [response_time_ms] > 2000 {
        mutate {
          add_tag => ["slow_response"]
        }
      } else if [response_time_ms] > 1000 {
        mutate {
          add_tag => ["moderate_response"]
        }
      } else {
        mutate {
          add_tag => ["fast_response"]
        }
      }
    }
    
    # Categorize HTTP status codes
    if [status_code] {
      if [status_code] >= 500 {
        mutate {
          add_tag => ["server_error"]
          add_field => { "status_category" => "5xx" }
        }
      } else if [status_code] >= 400 {
        mutate {
          add_tag => ["client_error"]
          add_field => { "status_category" => "4xx" }
        }
      } else if [status_code] >= 300 {
        mutate {
          add_tag => ["redirect"]
          add_field => { "status_category" => "3xx" }
        }
      } else if [status_code] >= 200 {
        mutate {
          add_tag => ["success"]
          add_field => { "status_category" => "2xx" }
        }
      }
    }
  }
  
  # Common enrichment for all logs
  
  # Add environment info
  mutate {
    add_field => {
      "environment" => "production"
      "service" => "antibot-security"
    }
  }
  
  # Parse dates if found in message
  date {
    match => [ "timestamp", "ISO8601", "yyyy-MM-dd HH:mm:ss", "dd/MMM/yyyy:HH:mm:ss Z" ]
    target => "@timestamp"
  }
  
  # Remove sensitive fields
  mutate {
    remove_field => [ "password", "token", "api_key", "secret" ]
  }
  
  # Add processing metadata
  mutate {
    add_field => {
      "logstash_processed_at" => "%{+yyyy-MM-dd'T'HH:mm:ss.SSSZ}"
      "logstash_version" => "8.9.0"
    }
  }
}

output {
  # Output to Elasticsearch with daily indices
  elasticsearch {
    hosts => ["elasticsearch:9200"]
    index => "%{[@metadata][beat]}-%{[@metadata][version]}-%{+YYYY.MM.dd}"
    
    # Use different indices based on log type
    if [type] == "security_event" {
      index => "security-events-%{+YYYY.MM.dd}"
    } else if [type] == "ml_prediction" {
      index => "ml-predictions-%{+YYYY.MM.dd}"
    } else if [type] == "application_log" {
      index => "application-logs-%{+YYYY.MM.dd}"
    } else if [type] == "http_access" {
      index => "http-access-%{+YYYY.MM.dd}"
    } else {
      index => "logstash-%{+YYYY.MM.dd}"
    }
    
    template_name => "antibot-security"
    template_overwrite => true
    template => "/usr/share/logstash/templates/antibot-template.json"
    
    # Document ID to prevent duplicates
    document_id => "%{[@metadata][fingerprint]}"
  }
  
  # Output critical events to Redis for immediate processing
  if "critical_threat" in [tags] or "very_high_risk" in [tags] {
    redis {
      host => "redis"
      port => 6379
      data_type => "list"
      key => "critical_security_events"
    }
  }
  
  # Send alerts for critical events
  if "critical_threat" in [tags] {
    http {
      http_method => "post"
      url => "${ALERT_WEBHOOK_URL:http://alertmanager:9093/api/v1/alerts}"
      headers => {
        "Content-Type" => "application/json"
      }
      mapping => {
        "alerts" => [
          {
            "labels" => {
              "alertname" => "CriticalSecurityEvent"
              "severity" => "critical"
              "service" => "antibot-security"
              "source_ip" => "%{source_ip}"
              "event_type" => "%{event_type}"
            }
            "annotations" => {
              "summary" => "Critical security event detected"
              "description" => "%{indicators}"
            }
          }
        ]
      }
    }
  }
  
  # Debug output for development
  if [debug] == "true" {
    stdout {
      codec => rubydebug
    }
  }
}